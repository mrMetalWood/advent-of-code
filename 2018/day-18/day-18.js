const input = `#|#..||.||....|.#..|#.|#......|.#....#..|...|#.#.#
#|...#..#.|..#..#...|..##.|....#|....#|.|..#......
......|.#.|.##.|.|.#..#.|...#...##..||...|..##|.#.
.###..#.#|..#.#.|...#|||.#|..#..|.|..#....#...#..|
.#|.|...|.#.##|.##....#..|...|...|.....#..#|...|.#
....||.#|.#|#..#.#|.....|.#..#.||#||.#....||#.....
#.#.#.|.|.|.|#.#.##|.........#.##.#|..||.##.......
.|.#.#...##.#.||..#|..|##...##...#.|..||.#.||....#
.||.|.#.#....|#|#..#|#.#..#||#..||.|....#|..|.....
##|.||.#...|.||..|..|.|...##.|||...|....#..|.|..|.
.##.|...|..|.....|#.|#.|#..|#....##|......|#.##...
|.###||...||..##...#.#||#.#.....|#..|#|..|.|.#.#..
..|#..#..|..#|||..||#.|#.......|..||......|##.....
##||...#.#...........#|###|...|..#|.....|.|..###..
.#.#...#|.|.|...|....#|.|#.#..#....##|..||..|.....
...#||...|##.#....|||....##|.|#|...|...#.||...|.##
...#.||...|.|.#...#.....#.|##|..|..#.|.#...|..|.#.
...|.#.###.|.||#|..#.|.#.#.........#...|...#.#|#|.
|..|....||.#...|#.#|.#.|.....#.###.|##.|....|.#|..
..#..#|.|.|.||##....#..||||...|.......#.#.......#.
..|....|.....#....|....#.|.#|#..||##.##......|.|#.
#..|.|..#.|||###|..|.#.#|.#...|...||........#..|#.
..#|...#..#....#....#.##...#...#.|...|......#..||.
#|#|...#...|...|..#|...|..#..|.#||..#.||.....|..#|
.||...#.|..|#||||...|..|##..|.#..|#|.##.....|#.||.
#|#.#...|...|......##|..#.|#.|.|....|.....|.#....#
...|....#..#.#|##..#..#||.....|.#|.#|#.||.||.#..#.
........#..##.......#...#..##......#.......#.#..|.
.|.|.#.||......#..||..|...##...#..#|..|.#....#|#..
##...|##....|||.##||..|....##.....|##||..|....#..#
.###.||..|..|..#||#.|#..|..#||#.#.#.##...|....#|#.
..##|.|..|.||...##|#||.........##|.....|#.|#..||..
....#...#|##.|.|.....#|...|..|....|||..|......#...
........|......|.|.....#.|......#......||....#.#.|
.....#|#..|#.||.|...#|#.....||#..|.#..|..|.#.||.#.
.||..|.##..#|...#....|..|..|.....||#......#|..|...
###.|.##..|.|##.|.||..##..#..|..#.#|.|#...##|##...
..##|..#..###..#.#......|.......|#.#.......|..||#|
#..|..|..#....|#|.......#||..#|........#..#.||.|.#
...#.|.#.......#|.....|................|..|#..#.|#
..|..#....|....|.|....#|#..#..#.###.#....#|..|.##.
#.|....#...|.|..|..||....||.#..#|#..#..###||.|#.#|
.|......|#.#|.|..#....|....#.........###..||.#.#|.
....###.#|.....#|...|.#.|..#...........#.......#||
.#|...|....#.#||..|..##|....|#.||..#.#...#.##||.#.
...|.||#.#...||.#|...||#.|||||..|..#..#|...#....#.
.##|||##.#|.|.#..#.....#.......|..|.|...|.|....#|.
#.#|....#.|..|.|.#..|.......#.....###.#..|......#|
.#.......|..#.#.#.|...#|.|...||#.||#.|........#.|.
..|.|##||.###.....|.|#.#|.||......#.##...|.#.#.#..`;

const lines = input.split('\n');
let state = lines.map(line => line.split(''));

const OPEN = '.';
const TREE = '|';
const LUMBERYARD = '#';

// top, top-right, right, bottom-right... (clockwise)
const dx = [0, 1, 1, 1, 0, -1, -1, -1];
const dy = [-1, -1, 0, 1, 1, 1, 0, -1];

const isOutOfBounds = (y, x) => {
  return y > state.length - 1 || y < 0 || x > state[0].length - 1 || x < 0;
};

const symbolsToCount = [TREE, LUMBERYARD];
const countAdjacentAcres = (y, x) => {
  let count = {[TREE]: 0, [LUMBERYARD]: 0};

  for (let direction = 0; direction < 8; direction++) {
    const newY = y + dy[direction];
    const newX = x + dx[direction];

    if (isOutOfBounds(newY, newX)) {
      continue;
    }

    symbolsToCount.forEach(symbol => {
      if (state[newY][newX] === symbol) {
        count[symbol]++;
      }
    });
  }

  return count;
};

const minutes = 10;
// const minutes = 1000; // part 2 (not 1000000000) - look at data

for (let minute = 0; minute < minutes; minute++) {
  const newState = JSON.parse(JSON.stringify(state));

  state.forEach((row, y) => {
    row.forEach((acre, x) => {
      switch (acre) {
        case OPEN:
          newState[y][x] =
            countAdjacentAcres(y, x)[TREE] >= 3 ? TREE : newState[y][x];
          break;

        case TREE: {
          newState[y][x] =
            countAdjacentAcres(y, x)[LUMBERYARD] >= 3
              ? LUMBERYARD
              : newState[y][x];
          break;
        }

        case LUMBERYARD: {
          const adjacentCount = countAdjacentAcres(y, x);
          newState[y][x] =
            adjacentCount[TREE] >= 1 && adjacentCount[LUMBERYARD] >= 1
              ? LUMBERYARD
              : OPEN;
          break;
        }

        default:
          break;
      }
    });
  });

  // Part 2 -> looking at this logged data
  // Repeats after step 504 every 28 steps.
  // Result from round: 504 + (1000000000 - 504) % 28
  // const diff = getTotal(newState) - getTotal(state);
  // console.log(i + 1);
  // console.count(diff);
  // console.log('New state', getTotal(newState));
  // Part 2 end

  state = newState;
  state.forEach(line => console.log(line.join('')));
}

function getTotal(s) {
  let treeCount = 0;
  let lumberyardCount = 0;
  let count = {};

  s.forEach((row, y) => {
    row.forEach((acre, x) => {
      if (acre === TREE) {
        treeCount++;
      }

      if (acre === LUMBERYARD) {
        lumberyardCount++;
      }
    });
  });

  return treeCount * lumberyardCount;
}

console.log('Result', getTotal(state));
